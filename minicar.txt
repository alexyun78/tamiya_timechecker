#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define OLED_RESET 4
Adafruit_SSD1306 display(OLED_RESET);

#define NUMFLAKES 10
#define XPOS 0
#define YPOS 1
#define DELTAY 2


#define LOGO16_GLCD_HEIGHT 16 
#define LOGO16_GLCD_WIDTH  16 

int flame = A0; //포토트랜지스터가 연결된 아날로그핀
int val = 0;    //센서출력값 저장 변수

int latchPin = 8;      //Pin connected to ST_CP of 74HC595
int clockPin = 12;   //Pin connected to SH_CP of 74HC595
int dataPin = 11;    //Pin connected to DS of 74HC595
byte led1[8] = {0b00000000, 0b00000010, 0b00000100, 0b00001000, 0b00000110, 0b00001010, 0b00001100, 0b00001110}; //OFF, R, G, B, RG, RB,GB, RGB
byte led2[8] = {0b00000000, 0b00010000, 0b00100000, 0b01000000, 0b00110000, 0b01010000, 0b01100000, 0b01110000};
byte led3[8] = {0b00000000, 0b00000010, 0b00000100, 0b00001000, 0b00000110, 0b00001010, 0b00001100, 0b00001110};
byte golbal_led1 = 0b00000000;
byte golbal_led2 = 0b00000000;
byte golbal_led3 = 0b00000000;
int trackCount = -1;
int aveVal = 0;
unsigned long currentMillis; // millis() 경과한 시간을 밀리 초로 반환한다.
unsigned long previousMillis=0;
unsigned long trackTime = 0;
unsigned long trackStart = 0;
unsigned long roundTime = 0;
boolean valCheck = false;
int buzzer = 7 ;// setting controls the digital IO foot buzzer
 
void setup() {
  pinMode(flame,INPUT);    //포토트랜지스터 입력설정
  pinMode(latchPin, OUTPUT);
  pinMode(dataPin, OUTPUT); 
  pinMode(clockPin, OUTPUT);
  pinMode (buzzer, OUTPUT) ;// set the digital IO pin mode, OUTPUT out of Wen
  pinMode (9,OUTPUT); //B
  pinMode(10,OUTPUT); //G
  pinMode(11,OUTPUT); //R
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);   
  display.display();
  delay(2000);
  // Clear the buffer.
  display.clearDisplay();    
  Serial.begin(115200);     //시리얼모니터 설정  
  currentMillis = millis();  
}
 
void loop() {   
  if (!valCheck) {
    int i=0;
    unsigned long sum = 0;
    while(millis()-currentMillis < 2000) {
      i++;    
      val=analogRead(flame);
      sum+=val;
     // Serial.print(i);
     // Serial.print('\t');
     // Serial.print(val);
     // Serial.print('\t');
     // Serial.println(sum);
    }  
    valCheck = true;
    aveVal = sum/i;
    Serial.print("Averrage Value is ========== > ");
    Serial.println(aveVal);     //포토트랜지스터 입력값 시리얼모니터로 출력    
    Serial.print("sum Value is ========== > ");
    Serial.println(sum);     //포토트랜지스터 입력값 시리얼모니터로 출력   
    Serial.print("i Value is ========== > ");
    Serial.println(i);     //포토트랜지스터 입력값 시리얼모니터로 출력   
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(WHITE);
    display.setCursor(0,0);
    display.print("Average is = ");
    display.println(aveVal);
    display.display();
  }
  val = analogRead(flame);  //포토트랜지스터에서 값을 읽어옴
  if (abs(aveVal - val) > 50)  {
    trackTime = millis(); 
    trackCount++;
    if (!trackCount) {
      trackStart = trackTime;
      Serial.println("########### START #########");
       Serial.println(val);
      display.setTextSize(2);
      display.setCursor(0,2);
      display.clearDisplay();
      display.print("# START #");
      display.display();
      display.setTextSize(1);
      display.clearDisplay();
      for(int i=0;i<2;i++) {
        digitalWrite(9+i,255);
        delay(25);  
        digitalWrite(9+i,0);   
        delay(15);   
      }    
    for (int i = 0; i <30; i++) // Wen a frequency sound
    {
      digitalWrite (buzzer, HIGH) ;// send voice
      delay (1) ;// Delay 1ms
      digitalWrite (buzzer, LOW) ;// do not send voice
      delay (1) ;// delay ms
    }  
    } else {
      Serial.print(trackCount);    
      Serial.print(" Round ");
      Serial.print((trackTime-trackStart)/1000);
      Serial.print(".");
      Serial.print((trackTime-trackStart)%1000);
      Serial.print(" Sec. ");
      Serial.print("Photo Value is ========== > ");
      Serial.println(val);     //포토트랜지스터 입력값 시리얼모니터로 출력
      display.display();
      display.setCursor(0,(trackCount-1)*8);
      display.print(trackCount);
      display.print("-R ");
      display.print((trackTime-trackStart-roundTime)/1000.0,2);
      //display.print(".");
      //display.print((trackTime-trackStart-roundTime)%1000);  
      display.print(" Sec ");        
      //display.print((trackTime-trackStart)/1000.0,2);
      display.print((19.88/((trackTime-trackStart-roundTime)/1000.0))*3.6,2);
      display.print(" Km");
      //display.print(".");
      //display.print((trackTime-trackStart)%1000);
      roundTime = trackTime - trackStart;
      display.display();
      for(int i=0;i<2;i++) {
        digitalWrite(9+i,255);
        delay(25);  
        digitalWrite(9+i,0);   
        delay(15);   
      }    
    for (int i = 0; i <20; i++) // Wen a frequency sound
    {
      digitalWrite (buzzer, HIGH) ;// send voice
      delay (1) ;// Delay 1ms
      digitalWrite (buzzer, LOW) ;// do not send voice
      delay (1) ;// delay ms
    }       
    }
  for(int i=0;i<8;i++) {
    //turn_on(led1[i], led2[i], led3[i]);       
    golbal_led1 = golbal_led1 | led1[i];
    golbal_led2 = golbal_led2 | led2[7-i];
    golbal_led3 = golbal_led3 | led3[i];
    turn_on(golbal_led1, golbal_led2, golbal_led3);
    golbal_led1=0b00000000; golbal_led2=0b00000000; golbal_led3=0b00000000;
    //turn_on(golbal_led1, golbal_led2, golbal_led3);        
  }    
  }  
  //delay(5);
}


void turn_on(byte a, byte b, byte c) {
  digitalWrite(latchPin, LOW);
  shiftOut(dataPin, clockPin, MSBFIRST, c); //LED3
  shiftOut(dataPin, clockPin, MSBFIRST, a | b); //LED1 + LED2 
  digitalWrite(latchPin, HIGH); 
  /*
  Serial.println("==========>>>>>>");
  Serial.println(a);
  Serial.println(b);
  Serial.println(c);
  Serial.println(a | b);
  Serial.println("<<<<<<==========");
  */
  delay(30);    
}